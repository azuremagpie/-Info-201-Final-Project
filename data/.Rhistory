stringsAsFactors = FALSE)
total_data <- official_data %>%
mutate(raw_data$State)
colnames(total_data)[4] <- "state"
# Map Projections
g <- list(
scope = "usa",
projection = list(type = "albers usa"),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
total_data$df <- with(total_data, paste(
state, "<br>",
"Official Percent Estimate: ", official, "<br>"
))
plot <- plot_geo(
total_data, locationmode = "USA-states") %>%
add_trace(
x = total_data$long, y = total_data$lat, text = total_data$df,
size = total_data$official, color = "grey") %>%
layout(title = "Official Percent Estimate", geo = g)
# Load necessary libraries into R
library(ggplot2)
library(dplyr)
library(tidyr)
library(maps)
library(mapdata)
library(ggmap)
library(plotly)
library(lintr)
# Load the raw data
raw_data <- read.csv("data/spm_2016.csv", stringsAsFactors = FALSE)
official_data <- read.csv("data/official-percentage.csv",
stringsAsFactors = FALSE)
total_data <- official_data %>%
mutate(raw_data$State)
colnames(total_data)[4] <- "state"
# Map Projections
g <- list(
scope = "usa",
projection = list(type = "albers usa"),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
total_data$df <- with(total_data, paste(
state, "<br>",
"Official Percent Estimate: ", official, "<br>"
))
plot <- plot_geo(
total_data, locationmode = "USA-states") %>%
add_trace(
x = total_data$long, y = total_data$lat, text = total_data$df,
size = total_data$official, color = "grey") %>%
layout(title = "Official Percent Estimate", geo = g)
# Load necessary libraries into R
library(ggplot2)
library(dplyr)
library(tidyr)
library(maps)
library(mapdata)
library(ggmap)
library(plotly)
library(lintr)
# Load the raw data
raw_data <- read.csv("data/spm_2016.csv", stringsAsFactors = FALSE)
official_data <- read.csv("data/official-percentage.csv",
stringsAsFactors = FALSE)
total_data <- official_data %>%
mutate(raw_data$State)
colnames(total_data)[4] <- "state"
# Map Projections
g <- list(
scope = "usa",
projection = list(type = "albers usa"),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
total_data$hover <- with(total_data, paste(
state, "<br>",
"Official Percent Estimate: ", official, "<br>"
))
plot <- plot_geo(
total_data, locationmode = "USA-states") %>%
add_trace(
x = total_data$long, y = total_data$lat, text = total_data$hover,
size = total_data$official, color = "grey") %>%
layout(title = "Official Percent Estimate", geo = g)
# Load necessary libraries into R
library(ggplot2)
library(dplyr)
library(tidyr)
library(maps)
library(mapdata)
library(ggmap)
library(plotly)
library(lintr)
# Load the raw data
raw_data <- read.csv("data/spm_2016.csv", stringsAsFactors = FALSE)
official_data <- read.csv("data/official-percentage.csv",
stringsAsFactors = FALSE)
total_data <- official_data %>%
mutate(raw_data$State)
colnames(total_data)[4] <- "state"
# Map Projections
g <- list(
scope = "usa",
projection = list(type = "albers usa"),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
total_data$hover <- with(total_data, paste(
state, "<br>",
"Official Percent Estimate: ", official, "<br>"
))
plot <- plot_geo(
total_data, locationmode = "USA-states") %>%
add_trace(
x = total_data$long, y = total_data$lat, text = total_data$hover,
size = total_data$official, color = "grey") %>%
layout(title = "Official Percent Estimate", geo = g)
# Load necessary libraries into R
library(plotly)
library(ggplot2)
library(dplyr)
packageVersion("plotly")
# Load the raw data
raw_data <- read.csv("data/spm_2016.csv", stringsAsFactors = FALSE)
official_data <- read.csv("data/official-percentage.csv",
stringsAsFactors = FALSE)
total_data <- official_data %>%
mutate(raw_data$State)
colnames(total_data)[4] <- "state"
# Map Projections
g <- list(
scope = "usa",
projection = list(type = "albers usa"),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
total_data$hover <- with(total_data, paste(
state, "<br>",
"Official Percent Estimate: ", official, "<br>"
))
plot <- plot_geo(
total_data, locationmode = "USA-states", sizes = c(1, 250)) %>%
add_markers(
x = total_data$long, y = total_data$lat, text = total_data$hover,
size = total_data$official, color = "grey") %>%
layout(title = "Official Percent Estimate", geo = g)
View(total_data)
# Load necessary libraries into R
library(plotly)
library(ggplot2)
library(dplyr)
packageVersion("plotly")
# Load the raw data
raw_data <- read.csv("data/spm_2016.csv", stringsAsFactors = FALSE)
official_data <- read.csv("data/official-percentage.csv",
stringsAsFactors = FALSE)
total_data <- official_data %>%
mutate(raw_data$State)
colnames(total_data)[4] <- "state"
# Map Projections
g <- list(
scope = "usa",
projection = list(type = "albers usa"),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
total_data$hover <- with(total_data, paste(
state, "<br>",
"Official Percent Estimate: ", official, "<br>"
))
plot <- plot_geo(
total_data, locationmode = "USA-states", sizes = c(1, 250)) %>%
add_markers(
x = total_data$long, y = total_data$lat, text = total_data$hover,
size = total_data$official, color = "grey") %>%
layout(title = "Official Percent Estimate", geo = g)
# Load necessary libraries into R
library(plotly)
library(ggplot2)
library(dplyr)
packageVersion("plotly")
# Load the raw data
raw_data <- read.csv("data/spm_2016.csv", stringsAsFactors = FALSE)
official_data <- read.csv("data/official-percentage.csv",
stringsAsFactors = FALSE)
total_data <- official_data %>%
mutate(raw_data$State)
colnames(total_data)[4] <- "state"
# Map Projections
g <- list(
scope = "usa",
projection = list(type = "albers usa"),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
total_data$hover <- with(total_data, paste(
state, "<br>",
"Official Percent Estimate: ", official, "<br>"
))
plot <- plot_geo(
total_data, locationmode = "USA-states", sizes = c(1, 250)) %>%
add_markers(
x = total_data$long, y = total_data$lat, text = total_data$hover,
size = total_data$official, color = "grey") %>%
layout(title = "Official Percent Estimate", geo = g)
g <- list(
scope = "usa",
projection = list(type = "albers usa"),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
total_data$hover <- with(total_data, paste(
state, "<br>",
"Official Percent Estimate: ", official, "<br>"
))
plot <- plot_geo(
total_data, locationmode = "USA-states", sizes = c(1, 250)) %>%
add_markers(
x = total_data$long, y = total_data$lat, text = total_data$hover,
size = total_data$official, color = "grey") %>%
layout(title = "Official Percent Estimate", geo = g)
# Load necessary libraries into R
library(plotly)
library(ggplot2)
library(dplyr)
packageVersion("plotly")
# Load the raw data
raw_data <- read.csv("data/spm_2016.csv")
official_data <- read.csv("data/official-percentage.csv")
total_data <- official_data %>%
mutate(raw_data$State)
colnames(total_data)[4] <- "state"
# Map Projections
g <- list(
scope = "usa",
projection = list(type = "albers usa"),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
total_data$hover <- with(total_data, paste(
state, "<br>",
"Official Percent Estimate: ", official, "<br>"
))
plot <- plot_geo(
total_data, locationmode = "USA-states", sizes = c(1, 250)) %>%
add_markers(
x = total_data$long, y = total_data$lat, text = total_data$hover,
size = total_data$official, color = "grey") %>%
layout(title = "Official Percent Estimate", geo = g)
styler:::style_active_file()
styler:::style_active_file()
x = total_data$long
y = total_data$lat
text = total_data$hover
size = total_data$official
color = "grey"
layout(title = "Official Percent Estimate", geo = g)
raw_data <- read.csv("data/spm_2016.csv", stringsAsFactors = FALSE)
official_data <- read.csv("data/official-percentage.csv",
stringsAsFactors = FALSE
)
total_data <- official_data %>%
mutate(raw_data$State)
raw_data <- read.csv("data/spm_2016.csv", stringsAsFactors = FALSE)
official_data <- read.csv("data/official-percentage.csv",
stringsAsFactors = FALSE
)
View(official_data)
total_data <- official_data %>%
mutate(raw_data$State)
colnames(total_data)[4] <- "state"
View(total_data)
scope = "usa",
g <- list(
scope = "usa",
projection = list(type = "albers usa"),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
View(g)
total_data$hover <- with(total_data, paste(
state, "<br>",
"Official Percent Estimate: ", official, "<br>"
))
View(official_data)
View(total_data)
plot <- plot_geo(
total_data,
locationmode = "USA-states", sizes = c(1, 250)
)
View(plot)
add_markers(
x = total_data$long, y = total_data$lat, text = total_data$hover,
locations = total_data$official, color = "grey"
)
plot <- plot_geo(
total_data,
locationmode = "USA-states", sizes = c(1, 250)
) %>%
add_markers(
x = total_data$long, y = total_data$lat, text = total_data$hover,
locations = total_data$official, color = "grey"
)
plot <- plot_geo(
total_data,
locationmode = "USA-states", sizes = c(1, 250)
) %>%
add_markers(
x = total_data$long, y = total_data$lat, text = total_data$hover,
locations = total_data$official, color = "grey"
) %>%
layout(title = "Official Percent Estimate", geo = g)
# Load necessary libraries into R
library(plotly)
library(ggplot2)
library(dplyr)
packageVersion("plotly")
# Load the raw data
raw_data <- read.csv("data/spm_2016.csv", stringsAsFactors = FALSE)
official_data <- read.csv("data/official-percentage.csv",
stringsAsFactors = FALSE
)
total_data <- official_data %>%
mutate(raw_data$State)
colnames(total_data)[4] <- "state"
# Map Projections
g <- list(
scope = "usa",
projection = list(type = "albers usa"),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
total_data$hover <- with(total_data, paste(
state, "<br>",
"Official Percent Estimate: ", official, "<br>"
))
plot <- plot_geo(
total_data,
locationmode = "USA-states", sizes = c(1, 250)
) %>%
add_markers(
x = total_data$long, y = total_data$lat, text = total_data$hover,
locations = total_data$official, color = "grey"
) %>%
layout(title = "Official Percent Estimate", geo = g)
library(shiny)
library(plotly)
library(tidyverse)
library(ggplot2)
library(shiny)
library(plotly)
library(ggplot2)
library(shiny)
library(plotly)
library(ggplot2)
my_ui <- fluidPage(
sidebarLayout(
sidebarPanel(
h3("Addition"),
# selectInput("addition", "Select population to view",
#             c("All.people.Estimate",
#               "Under.18.years.Estimate",
#               "X18.to.64.years.Estimate",
#               "X65.years.and.over.Estimate"),
#             selected = "All.people.Estimate"
# ),
# h3("Subtraction"),
# selectInput("subtraction", "Select population to view",
#             c("All.people.Estimate",
#               "Under.18.years.Estimate",
#               "X18.to.64.years.Estimate",
#               "X65.years.and.over.Estimate"),
#             selected = "All.people.Estimate"
# )
),
mainPanel(
# plotOutput("bar"),
# plotOutput("bar2"),
plotlyOutput("map")
)
)
)
library(shiny)
library(plotly)
library(ggplot2)
my_ui <- fluidPage(
sidebarLayout(
sidebarPanel(
# h3("Addition"),
# selectInput("addition", "Select population to view",
#             c("All.people.Estimate",
#               "Under.18.years.Estimate",
#               "X18.to.64.years.Estimate",
#               "X65.years.and.over.Estimate"),
#             selected = "All.people.Estimate"
# ),
# h3("Subtraction"),
# selectInput("subtraction", "Select population to view",
#             c("All.people.Estimate",
#               "Under.18.years.Estimate",
#               "X18.to.64.years.Estimate",
#               "X65.years.and.over.Estimate"),
#             selected = "All.people.Estimate"
# )
),
mainPanel(
# plotOutput("bar"),
# plotOutput("bar2"),
plotlyOutput("map")
)
)
)
my_server <- function(input, output) {
# output$bar <- renderPlot({
#   bar1 <- tapply(add_average[,input$addition], add_average$X, mean)
#   barplot(bar1, xlab = "X axis", main = "Additions Average", horiz = TRUE,
#           las = 1, col = " light blue" )
# })
# output$bar2 <- renderPlot({
#   bar2 <- tapply(subtract_average[,input$subtraction], subtract_average$X, mean)
#   barplot(bar2, xlab = "X axis", main = "Subtraction Average", horiz = TRUE,
#           las = 1, col = "light blue")
# })
output$map <- renderPlot({
plot_geo(
total_data,
locationmode = "USA-states", sizes = c(1, 250)
) %>%
add_markers(
x = total_data$long, y = total_data$lat, text = total_data$hover,
locations = total_data$official, color = "grey"
) %>%
layout(title = "Official Percent Estimate", geo = g)
})
}
shinyApp(ui = my_ui, server = my_server)
runApp('~/Desktop/INFO_201')
runApp('~/Desktop/INFO_201')
lat_long <- read.csv("data/zip_codes_states.csv", stringsAsFactors = FALSE)
View(lat_long)
install.packages("rjson")
install.packages("rjson")
install.packages("jsonlite")
thingy <- fromJSON("USstates_avg_latLon.json")
thingy <- fromJSON("USstates_avg_latLong.json")
install.packages("jsonlite")
install.packages("jsonlite")
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
thingy <- fromJSON("USstates_avg_latLong.json")
thingy <- stream_in_file(file("lat_long_json.json"))
thingy <- stream_in(file("lat_long_json.json"))
setwd("~/Desktop/INFO_201")
setwd("~/Desktop/INFO_201/Info-201-Final-Project/data")
thingy <- stream_in(file("lat_long_json.json"))
thingy <- stream_in(file("lat_long_json.json"))
states <- lat_long %>%
group_by(state)
states <- lat_long %>%
group_by(state)
library(dplyr)
states <- lat_long %>%
group_by(state)
View(states)
