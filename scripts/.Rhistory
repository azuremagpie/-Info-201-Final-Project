# You should convert the `Titanic` variable into a data frame;
# you can use the `data.frame()` function or `as.data.frame()`
# Be sure to **not** treat strings as factors!
Titanic <- as.data.frame(Titanic, stringsAsFactors = FALSE)
# Create a variable `children` that are the *only* the rows of the data frame
# with information about the number children on the Titanic.
children <- Titanic[Titanic$Age == "Child", ]
# Create a variable `num_children` that is the total number of children.
# Hint: remember the `sum()` function!
num_children <- sum(nrow(children))
# Create a variable `most_lost` which has the *row* with the
# largest absolute number of losses (people who did not survive).
# Tip: if you want, you can use multiple statements (lines of code)
# if you find that helpful to create this variable.
no_survive <- Titanic[Titanic$Survived == "No", ]
most_lost <- no_survive[no_survive$Freq == max(no_survive$Freq), ]
# Define a function called `survival_rate()` that takes in a ticket class
# (e.g., "1st", "2nd") as an argument.This function should return the following
# sentence that compares the *total survival rate* of adult men vs.
# "women and children" in that ticketing class. It should read (for example):
# "Of Crew class, 87% of women and children survived and 22% of men survived.".
# The approach you take to generating the sentence to return is up to you.
# A good solution will likely utilize filtering to produce the required data.
survival_rate <- function(ticket_class) {
#Filter out the class
class <- Titanic[Titanic$Class == ticket_class, ]
class_survive <- class[class$Survived == "Yes", ]
class_survive_total <- sum(class[class$Survived == "Yes", "Freq"])
men <- class_survive[class$Sex == "Male", ]
men_survive_total <- sum(men[men$Age == "Adult", "Freq"], na.rm = TRUE) / class_survive_total
women_and_chilren_total <- (class_survive_total - men_survive_total) / class_survive_total
print(paste("Of ", ticket_class, " ",  women_and_chilren_total * 100,
"$ of women and children survived and ", men_survive_total * 100,
"% of men survived."))
#Of a class: find total survive
#get the surival rate of man, then women and child
}
# Create variables `first_survived`, `second_survived`, `third_survived` and
# `crew_survived` by passing each class to your function above.
########################### Reading in Data (40 points)#########################
# In this section, we'll read in a .csv file with a tabular row/column layout
# This is like Microsoft Excel or Google Docs, but without the formatting.
# The .csv file we'll be working with has the life expectancy
# for each country in 1960 and 2013. We'll ask real-world questions about the
# data by writing the code that answers our question.
# Using the `read.csv` function, read the life_expectancy.csv file into
# a variable called `life_expectancy`. Makes sure not to read strings as factors
life_expectancy <- read.csv("data/life_expectancy.csv", stringsAsFactors = FALSE)
# Determine if `life_expectancy` is a data.frame by using
# the is.data.frame function. You may also want to View() it.
is.data.frame(life_expectancy)
# Create a column `life_expectancy$change` that is the change
# in life expectancy from 1960 to 2013
life_expectancy$change <- life_expectancy$le_2013 - life_expectancy$le_1960
# Create a variable `most_improved` that is the *name* of the country
# with the largest gain in life expectancy
most_improved <- life_expectancy$country[life_expectancy$change == max(life_expectancy$change)]
# Create a variable `num_small_gain` that has the *number* of countries
# whose life expectance has improved fewer than 5 years between 1960 and 2013
num_small_gain <- length(life_expectancy$country[life_expectancy$change < 5])
# Write a function `country_change()` that takes in a country's name
# as a parameter, and returns it's change in life expectancy from 1960 to 2013
country_change <- function(country_name) {
life_expectancy$change[life_expectancy$country == country_name]
}
# Using your `country_change()` function, create a variable `sweden_change`
# that is the change in life expectancy from 1960 to 2013 in Sweden
sweden_change <- country_change("Sweden")
# Define a function `lowest_life_exp_in_region()` that takes in a **region**
# as an argument, and returns the **name of the country**
# with the lowest life expectancy in 2013 (in that region)
lowest_life_exp_in_region <- function(region_name) {
region_min <- min(life_expectancy$le_2013[life_expectancy$region == region_name])
life_expectancy$country[region_min]
}
# Using the function you just wrote, create a variable `lowest_in_south_asia`
# that is the country with the lowest life expectancy in 2013 in South Asia
lowest_in_south_asia <- lowest_life_exp_in_region("South Asia")
# Write a function `bigger_change()` that takes in two country names
# as parameters, and returns a sentence that describes which country experienced
# a larger gain in life expectancy (and by how many years).
# For example, if you passed the values "China", and "Bolivia" to you function,
# It would return this:
# "The country with the bigger change in life expectancy was China (gain=31.9),
#  whose life expectancy grew by 7.4 years more than Bolivia's (gain=24.5)."
# Make sure to round your numbers to one digit.
bigger_change <- function(country1, country2) {
country1_change <-life_expectancy$change[life_expectancy$country == country1]
country2_change <- life_expectancy$change[life_expectancy$country == country2]
difference <- round(country1_change - country2_change, digits = 1)
if (difference < 0) {
larger_country <- country2
larger_gain <- country2_change
smaller_country <- country1
smaller_gain <- country1_change
} else {
larger_country <- country1
larger_gain <- country1_change
smaller_country <- country2
smaller_gain <- country2_change
}
print(paste("The country with the bigger change in life expectancy was ",
larger_country, " (gain=", larger_gain, "), ", "whose life expectancy grew by ",
abs(difference), " more than ", smaller_country, "'s (gain=", smaller_gain, ").",
sep = ""))
}
# Using your `bigger_change()` function, create a variable `usa_or_france`
# that describes who had a larger gain in life expectancy (the U.S. or France)
usa_or_france <- bigger_change("United States", "France")
# Write your `life_expectancy` data.frame to a new .csv file to your
# data/ directory with the filename `life_expectancy_with_change.csv`.
# Make sure not to write row names.
write.csv(life_expectancy, "data/life_expectancy_with_change.csv")
############################## Challenge (10 points) ###########################
# Create a variable `highest_avg_change` that has the name of the region with
# the highest *average change* in life expectancy between the two time points.
# To do this, you'll need to *compute the average* change across the countries
# in each region, and then compare the averages across regions.
# Feel free to use any library of your choice, or base R functions.
highest_avg_change <-
#
# Create a *well labeled* plot (readable title, x-axis, y-axis) showing
# Life expectancy in 1960 v.s. Change in life expectancy
# Programmatically save (i.e., with code, not using the Export button)
# your graph as a .png file in your repo
# Then, in a comment below, *provide an interpretation* of the relationship
# you observe. Feel free to use any library of your choice, or base R functions.
# Put your interpretation here!
first_survived <- survival_rate("1st")
survival_rate <- function(ticket_class) {
#Filter out the class
class <- Titanic[Titanic$class == ticket_class, ]
class_survive <- class[class$Survived == "Yes", ]
class_survive_total <- sum(class[class$Survived == "Yes", "Freq"])
men <- class_survive[class$Sex == "Male", ]
men_survive_total <- sum(men[men$Age == "Adult", "Freq"], na.rm = TRUE) / class_survive_total
women_and_chilren_total <- (class_survive_total - men_survive_total) / class_survive_total
print(paste("Of ", ticket_class, " class ",  round(women_and_chilren_total * 100),
"% of women and children survived and ", round(men_survive_total * 100),
"% of men survived."), sep = "")
}
# Create variables `first_survived`, `second_survived`, `third_survived` and
# `crew_survived` by passing each class to your function above.
first_survived <- survival_rate("1st")
class <- Titanic[Titanic$Class == ticket_class, ]
class_survive <- class[class$Survived == "Yes", ]
class_survive_total <- sum(class[class$Survived == "Yes", "Freq"])
men <- class_survive[class$Sex == "Male", ]
men_survive_total <- sum(men[men$Age == "Adult", "Freq"], na.rm = TRUE) / class_survive_total
women_and_chilren_total <- (class_survive_total - men_survive_total) / class_survive_total
print(paste("Of ", ticket_class, " class ",  round(women_and_chilren_total * 100),
"% of women and children survived and ", round(men_survive_total * 100),
"% of men survived."), sep = "")
}
# Create variables `first_survived`, `second_survived`, `third_survived` and
# `crew_survived` by passing each class to your function above.
first_survived <- survival_rate("1st")
survival_rate <- function(ticket_class) {
#Filter out the class
class <- Titanic[Titanic$Class == ticket_class, ]
class_survive <- class[class$Survived == "Yes", ]
class_survive_total <- sum(class[class$Survived == "Yes", "Freq"])
men <- class_survive[class$Sex == "Male", ]
men_survive_total <- sum(men[men$Age == "Adult", "Freq"], na.rm = TRUE) / class_survive_total
women_and_chilren_total <- (class_survive_total - men_survive_total) / class_survive_total
print(paste("Of ", ticket_class, " class ",  round(women_and_chilren_total * 100),
"% of women and children survived and ", round(men_survive_total * 100),
"% of men survived."), sep = "")
}
# Create variables `first_survived`, `second_survived`, `third_survived` and
# `crew_survived` by passing each class to your function above.
first_survived <- survival_rate("1st")
class <- Titanic[Titanic$Class == "Crew", ]
class_survive <- class[class$Survived == "Yes", ]
class_survive_total <- sum(class[class$Survived == "Yes", "Freq"])
men <- class_survive[class$Sex == "Male", ]
men_survive_total <- sum(men[men$Age == "Adult", "Freq"], na.rm = TRUE) / class_survive_total
women_and_chilren_total <- (class_survive_total - men_survive_total) / class_survive_total
View(Titanic)
men
men$Freq
sum(men$Freq)
sum(men$Freq, na.rm)
sum(men$Freq, na.rm = TRUE)
class[class$Sex == "Male"]
class[class$Sex == "Male", ]
class[class$Sex == "Male", ][class$Age == "Adult"]
class[class$Sex == "Male", ][class$Age == "Adult", ]
class[class$Sex == "Male", ]
subset(class[class$Sex == "Male", ], Age == "Adult")
class <- Titanic[Titanic$Class == "Crew", ]
class_survive <- class[class$Survived == "Yes", ]
class_survive_total <- sum(class[class$Survived == "Yes", "Freq"])
total_men <- subset(class[class$Sex == "Male", ], Age == "Adult")
total_women_and_children <- subset(class, Sex == "Female")
total_women_and_children
subset(class, Sex == "Female")$Freq
sum(subset(class, Sex == "Female")$Freq)
sum(subset(class[class$Sex == "Male", ], Age == "Adult")$Freq)
subset(class[class$Sex == "Male", ], Age == "Adult")
lintr:::addin_lint()
class <- Titanic[Titanic$Class == "Crew", ]
class_survive <- class[class$Survived == "Yes", ]
class_survive_total <- sum(class[class$Survived == "Yes", "Freq"])
total_men <- sum(subset(class[class$Sex == "Male", ], Age == "Adult")$Freq)
total_women_and_children <- sum(subset(class, Sex == "Female")$Freq)
male_survive <- class_survive[class$Sex == "Male", ]
men_survive_total <- sum(male[male_survive$Age == "Adult", "Freq"], na.rm = TRUE) / total_men
women_and_chilren_total <- (class_survive_total - men_survive_total) / total_women_and_children
print(paste("Of ", ticket_class, "class",  round(women_and_chilren_total * 100),
"% of women and children survived and ", round(men_survive_total * 100),
"% of men survived."), sep = "")
class <- Titanic[Titanic$Class == "Crew", ]
class_survive <- class[class$Survived == "Yes", ]
class_survive_total <- sum(class[class$Survived == "Yes", "Freq"])
total_men <- sum(subset(class[class$Sex == "Male", ], Age == "Adult")$Freq)
total_women_and_children <- sum(subset(class, Sex == "Female")$Freq)
male_survive <- class_survive[class$Sex == "Male", ]
men_survive_total <- sum(male_survive[male_survive$Age == "Adult", "Freq"],
na.rm = TRUE) / total_men
women_and_chilren_total <- (class_survive_total - men_survive_total) / total_women_and_children
print(paste("Of ", ticket_class, "class",  round(women_and_chilren_total * 100),
"% of women and children survived and ", round(men_survive_total * 100),
"% of men survived."), sep = "")
}
class <- Titanic[Titanic$Class == "Crew", ]
class_survive <- class[class$Survived == "Yes", ]
class_survive_total <- sum(class[class$Survived == "Yes", "Freq"])
total_men <- sum(subset(class[class$Sex == "Male", ], Age == "Adult")$Freq)
total_women_and_children <- sum(subset(class, Sex == "Female")$Freq)
male_survive <- class_survive[class$Sex == "Male", ]
men_survive_total <- sum(male_survive[male_survive$Age == "Adult", "Freq"],
na.rm = TRUE) / total_men
women_and_chilren_total <- (class_survive_total - men_survive_total) / total_women_and_children
print(paste("Of ", ticket_class, "class",  round(women_and_chilren_total * 100),
"% of women and children survived and ", round(men_survive_total * 100),
"% of men survived."), sep = "")
class <- Titanic[Titanic$Class == "Crew", ]
class_survive <- class[class$Survived == "Yes", ]
class_survive_total <- sum(class[class$Survived == "Yes", "Freq"])
total_men <- sum(subset(class[class$Sex == "Male", ], Age == "Adult")$Freq)
total_women_and_children <- sum(subset(class, Sex == "Female")$Freq)
male_survive <- class_survive[class$Sex == "Male", ]
men_survive_total <- sum(male_survive[male_survive$Age == "Adult", "Freq"],
na.rm = TRUE) / total_men
women_and_chilren_total <- (class_survive_total - men_survive_total) / total_women_and_children
print(paste("Of ", "crew", "class",  round(women_and_chilren_total * 100),
"% of women and children survived and ", round(men_survive_total * 100),
"% of men survived."), sep = "")
class_survive_total
class
subset(class, Sex == "Female")$Freq
subset(class, Sex == "Female")
men_survive_total
install.packages("jsonlite")  # once per machine
library("jsonlite")
library(jsonlite)
library(httr)
install.packages("ggplot2")
rm(list = ls())
library(ggplot2)
library(dplyr)
View(diamonds)
diamonds_sample <- sample_n(diamonds)
diamonds_sample <- sample_n(diamonds, n = 1000)
sample_n()
?sample_n()
diamonds_sample <- sample_n(diamonds, size = 1000)
ggplot(diamonds_sample)
ggplot(data = diamonds_sample)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = blue))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = "blue"))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = carat, size = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = carat, size = price, color = price))
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, size = cut))
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds_sample) +
geom_histogram(mapping = aes(x = cut))
ggplot(data = diamonds_sample) +
geom_histogram(mapping = aes(x = clarity))
ggplot(data = diamonds_sample) +
geom_histogram(mapping = aes(x = price, fill = clarity)
ggplot(data = diamonds_sample) +
geom_histogram(mapping = aes(x = price, fill = clarity))
ggplot(data = diamonds_sample) +
geom_histogram(mapping = aes(x = price, fill = clarity))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = cut), alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut), se = FALSE)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) +
stat_count(mapping = aes(x = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) +
stat_count(mapping = aes(x = cut))
ggplot(data = diamonds) +
stat_summary(mapping = aes(x = cut, y = depth),
fun.ymin = min, fun.ymax = max, fun.y = median)
install.packages("tinytex")
librart("tinytex")
library("tinytex")
setwd("C:/Users/hien1/Google Drive/INFO/Info-201-Final-Project/data")
addition_2016 <- read.csv("additions_2016.csv", stringsAsFactors = F)
View(addition_2016)
?as.numeric
is.numeric(addition_2016[1, 2])
?gsub
addition_2016[] <- lapply(addition_2016,
gsub, pattern = "?",
replacement = "", fixed = T)
addition_2016[1]
addition_2016[, 1]
is.numeric(addition_2016[1, 2])
addition_2016[1, 2]
addition[, -1]
addition_2016
addition_2016[, -1]
addition_2016[] <- lapply(addition_2016[, -1], as.numeric)
is.numeric(addition_2016[2, 2])
write.csv(addition_2016, file = "additions_2016_v2")
write.csv(addition_2016, file = "additions_2016_v2.csv")
addition_2016[] <- lapply(addition_2016, as.numeric)
conversion <- lapply(addition_2016[,-1], as.numeric)
conversion
View(conversion)
addition_2016 <- read.csv("additions_2016.csv", stringsAsFactors = F)
#Remove special character from addition_2016
addition_2016[] <- lapply(addition_2016,
gsub, pattern = "?",
replacement = "", fixed = T)
is.list(conversion)
conversion[] <- lapply(addition_2016[,-1], as.numeric)
View(conversion)
data.frame(conversion)
rownames(conversion)
View(conversion)
conversion <- data.frame(lapply(addition_2016[,-1], as.numeric))
View(conversion)
data_1 <- data.frame(addition_2016[1], conversion)
View(data_1)
write.csv(data_1, file = "additions_2016_v2.csv")
addition_2015 <- read.csv("additions_2015.csv", stringsAsFactors = F)
addition_2015[] <- lapply(addition_2015,
gsub, pattern = "?",
replacement = "", fixed = T)
conversion2 <- data.frame(lapply(addition_2015[,-1], as.numeric))
data_2 <- data.frame(addition_2015[1], conversion)
write.csv(data_2, file = "additions_2015_v2.csv")
addition_2015 <- read.csv("Additions_2015.csv", stringsAsFactors = F)
getwd()
addition_2015 <- read.csv("Additions_2015.csv", stringsAsFactors = F)
addition_2015[] <- lapply(addition_2015,
gsub, pattern = "?",
replacement = "", fixed = T)
conversion2 <- data.frame(lapply(addition_2015[,-1], as.numeric))
data_2 <- data.frame(addition_2015[1], conversion)
write.csv(data_2, file = "additions_2015_v2.csv")
View(data_2)
mean(data_1, data_2)
(data_1 + data_2) /2
x <- (data_1 + data_2) /2
install.packages('abind')
data_1[, -1]
average <- apply(abind::abind(data_1[, -1], data_2[, -1], along=2),
1:4, mean)
?abind
average <- apply(abind::abind(data_1[, -1], data_2[, -1], along=3),
1:4, mean)
data_1 + data_2
colnames(data_1)
nrow(addition_2015)
average_2015_2016 <- data.frame(matrix(ncol = ncol(addition_2015),
nrow = nrow(addition_2015)))
View(average_2015_2016)
nrow(data_1)
average_2015_2016 <- data.frame(matrix(ncol = ncol(data_1),
nrow = nrow(data_1)))
colnames(average_2015_2016) <- colnames(data_1)
rownames(average_2015_2016) <- rownames(average_2015_2016)
colnames(data_1)
colnames(average_2015_2016) <- colnames(data_1[2:5])
average_2015_2016 <- data.frame(matrix(ncol = ncol(data_1) - 1,
nrow = nrow(data_1) - 1))
colnames(average_2015_2016) <- colnames(data_1[2:5])
rownames(average_2015_2016) <- data_1[1]
data_1[1]
is.vector(data_1)
rownames(average_2015_2016) <- as.vector(data_1[1])
as.vector(data_1[1])
rownames(average_2015_2016) <- as.vector(data_1[1])
row.names(average_2015_2016) <- as.vector(data_1[1])
row.names(average_2015_2016) <- list(data_1[1])
View(data_1)
rownames(average_2015_2016) <- as.vector(data_1[1:12, 1])
ncol(average_2015_2016)
nrow(average_2015_2016)
average_2015_2016 <- data.frame(matrix(ncol = ncol(data_1) - 1,
nrow = nrow(data_1)))
colnames(average_2015_2016) <- colnames(data_1[2:5])
rownames(average_2015_2016) <- as.vector(data_1[1:12, 1])
View(data_2)
addition_2015 <- read.csv("Additions_2015.csv", stringsAsFactors = F)
addition_2015[] <- lapply(addition_2015,
gsub, pattern = "?",
replacement = "", fixed = T)
conversion2 <- data.frame(lapply(addition_2015[,-1], as.numeric))
data_2 <- data.frame(addition_2015[1], conversion2)
write.csv(data_2, file = "additions_2015_v2.csv")
View(data_2)
for (i in 1:nrow(average_2015_2016)) {
for (j in 1:ncol(average_2015_2016)) {
average_2015_2016[i, j] <- (data_1[i, j + 1] + data_2[i, j + 1]) / 2
}
}
(data_1[1, 2] + data_2[1, 2]) /2
for (i in 1:nrow(average_2015_2016)) {
for (j in 1:ncol(average_2015_2016)) {
average_2015_2016[i, j] <- round(((data_1[i, j + 1] + data_2[i, j + 1]) / 2),
digits = 1)
}
}
for (i in 1:nrow(average_2015_2016)) {
for (j in 1:ncol(average_2015_2016)) {
average_2015_2016[i, j] <- round(((data_1[i, j + 1] + data_2[i, j + 1]) / 2),
digits = 2)
}
}
additions_average_2015_2016 <- data.frame(matrix(ncol = ncol(data_1) - 1,
nrow = nrow(data_1)))
colnames(additions_average_2015_2016) <- colnames(data_1[2:5])
rownames(additions_average_2015_2016) <- as.vector(data_1[1:12, 1])
for (i in 1:nrow(additions_average_2015_2016)) {
for (j in 1:ncol(additions_average_2015_2016)) {
additions_average_2015_2016[i, j] <-
round(((data_1[i, j + 1] + data_2[i, j + 1]) / 2),
digits = 2)
}
}
View(additions_average_2015_2016)  #Use this dataframe to create reactive histogram
write.csv(additions_average_2015_2016,
file = "additions_average_2015_2016.csv")
View(additions_average_2015_2016)
View(additions_average_2015_2016)
subtraction_2015 <- read.csv("Subtraction_2015.csv", stringsAsFactors = F)
conversion3 <- data.frame(lapply(subtraction_2015[,-1], as.numeric))
View(subtraction_2015)
subtraction_2015[1:5, 1]
subtraction_2015 <- read.csv("Subtraction_2015.csv", stringsAsFactors = F)
conversion3 <- data.frame(lapply(subtraction_2015[,-1], as.numeric))
rownames(conversion3) <- as.vector(subtraction_2015[1:5, 1])
View(conversion3)
write.csv(data_3, file = "subtraction_2015_v2.csv")
data_3 <- data.frame(lapply(subtraction_2015[,-1], as.numeric))
rownames(data_3) <- as.vector(subtraction_2015[1:5, 1])
write.csv(data_3, file = "subtraction_2015_v2.csv")
subtraction_2016 <- read.csv("Subtraction_2016.csv", stringsAsFactors = F)
data_4 <- data.frame(lapply(subtraction_2016[,-1], as.numeric))
rownames(data_4) <- as.vector(subtraction_2016[1:5, 1])
write.csv(data_4, file = "subtraction_2016_v2.csv")
subtraction_average_2015_2016 <- data.frame(matrix(ncol = ncol(data_3),
nrow = nrow(data_3)))
colnames(subtraction_average_2015_2016) <- colnames(data_3)
rownames(subtraction_average_2015_2016) <- rownames(data_3)
subtraction_average_2015_2016 <- data.frame(matrix(ncol = ncol(data_3),
nrow = nrow(data_3)))
colnames(subtraction_average_2015_2016) <- colnames(data_3)
rownames(subtraction_average_2015_2016) <- rownames(data_3)
write.csv(subtraction_average_2015_2016,
file = "subtraction_average_2015_2016_v2.csv")
View(subtraction_average_2015_2016)
for (i in 1:nrow(subtraction_average_2015_2016)) {
for (j in 1:ncol(subtraction_average_2015_2016)) {
subtraction_average_2015_2016[i, j] <-
round(((data_3[i, j] + data_4[i, j]) / 2),
digits = 2)
}
}
write.csv(subtraction_average_2015_2016,
file = "subtraction_average_2015_2016_v2.csv")
getwd()
setwd("C:/Users/hien1/Google Drive/INFO/Info-201-Final-Project/scripts")
shiny::runApp()
install.packages("shinythemes")
library(shinythemes)
runApp()
runApp()
runApp()
runApp()
